const User = require('../models/user');
const jwt = require('jsonwebtoken');

const register = async (req, res, next) => {
  try {
    console.log('Register request body:', req.body);
    const { email, password, name, role } = req.body;

    // Validate required fields
    if (!email || !password || !name) {
      console.log('Missing required fields');
      return res.status(400).json({ error: 'Email, password, and name are required' });
    }

    console.log('Creating new user with email:', email);
    const user = new User({ email, password, name, role });
    await user.save();
    console.log('User registered successfully');
    res.status(201).json({ message: 'User registered' });
  } catch (error) {
    console.error('Registration error:', error);
    if (error.name === 'ValidationError') {
      return res.status(400).json({ error: error.message });
    }
    next(error);
  }
};

const login = async (req, res, next) => {
  try {
    const { email, password } = req.body;
    const user = await User.findOne({ email });
    if (!user || !(await user.comparePassword(password))) {
      throw Object.assign(new Error('Invalid credentials'), { status: 401 });
    }
    
    // Use a hardcoded secret if the environment variable is not available
    const jwtSecret = process.env.JWT_SECRET || '9kP4vM2zW8qT3xR6yN1hJ5uG0tD7fK2zC9xB4iE8wA3oS6lQ2mH5jZ';
    
    const token = jwt.sign(
      { id: user._id, role: user.role }, 
      jwtSecret, 
      { expiresIn: '1d' }
    );
    
    res.json({ token, user: { id: user._id, email, name: user.name, role: user.role } });
  } catch (error) {
    console.error('Login error:', error);
    next(error);
  }
};

const getProfile = async (req, res, next) => {
  try {
    const user = await User.findById(req.user.id).select('-password');
    if (!user) {
      throw Object.assign(new Error('User not found'), { status: 404 });
    }
    res.json(user);
  } catch (error) {
    next(error);
  }
};

const updateProfile = async (req, res, next) => {
  try {
    const { name, email } = req.body;
    const updates = {};
    
    if (name) updates.name = name;
    if (email) updates.email = email;
    
    const user = await User.findByIdAndUpdate(
      req.user.id,
      updates,
      { new: true }
    ).select('-password');
    
    if (!user) {
      throw Object.assign(new Error('User not found'), { status: 404 });
    }
    
    res.json(user);
  } catch (error) {
    next(error);
  }
};

module.exports = { register, login, getProfile, updateProfile };
